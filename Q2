






































import java.util.*;

public class playfair {
	
	public static String removeDuplicateElementFromKey(String key) {
		
		if(key != null && key != "") {
			
			char[] array = new char[key.length()];
			
			for(int i = 0; i < key.length(); i++) {
				if(isNotContains(array, key.charAt(i))) {
					array[i] = key.charAt(i);
				}
			}
			
			return removeEmptyElements(array);
		}
		
		return "";
	}
	
	public static boolean isNotContains(char[] array, char c) {
		for(int i = 0; i < array.length; i++) {
			if(array[i] == c) {
				return false;
			}
		}
		return true;
	}
	
	public static String removeEmptyElements(char[] array) {
		String keyString = "";
		
		for(int i = 0; i < array.length; i++) {
			if(array[i] != '\u0000') {
				keyString += array[i];
			}
		}
		return keyString;
	}
	
	public static String createArrayString(String uniqueKeyString, char[] alphabet) {
		char[] a = new char[25];
		
		for(int i = 0; i < uniqueKeyString.length(); i++) {
			a[i] = uniqueKeyString.charAt(i);
		}
		
		int count = uniqueKeyString.length();
		
		for(int i = 0; i < a.length; i++) {
			
			if(isNotContains(a, alphabet[i])) {
				
				a[count] = alphabet[i];
				count++;
			}
		}
		
		
		
		return removeEmptyElements(a);
	}
	
	public static char[][] createKeyMatrix(String uniqueArrayString) {
		char[][] matrix = new char[5][5];
		
		int key = 0;
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				matrix[i][j] = uniqueArrayString.charAt(key);
				key++;
			}
		}
		return matrix;
	}
	
	public static void printKeyMatrix(char[][] matrix) {
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				System.out.print(matrix[i][j] + " ");
			}
			System.out.println();
		}
	}
	
	public static String toString(char[] array) {
		String cipher = "";
		
		for(int i = 0; i < array.length; i++) {
			cipher += array[i];
		}
		
		return cipher;
	}
	
	public static int rowIndex(char c, char[][] matrix) {
		int index = 0;
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(matrix[i][j] == c) {
					index = i;
					break;
				}
			}
		}
		return index;
	}
	
	public static int colIndex(char c, char[][] matrix) {
		int index = 0;
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(matrix[i][j] == c) {
					index = j;
					break;
				}
			}
		}
		return index;
	}
	

	public static String encrypt(String plainText, String key, char[][] keyMatrix) {

		

		char[] textArr = breakPlainTextIntoPairs(plainText);
		

		char[] cipherArr = new char[arrayLength(plainText)];

		for(int i = 0; i < textArr.length; i=i+2) {
			
			char first = textArr[i];
			char second = textArr[i+1];
			
			int r1 = rowIndex(first, keyMatrix);
			int c1 = colIndex(first, keyMatrix);
			
			int r2 = rowIndex(second, keyMatrix);
			int c2 = colIndex(second, keyMatrix);
			
			if(r1 == r2) {

				if(c1 == 4) {

					cipherArr[i] = keyMatrix[r1][0];
				} else {
					cipherArr[i] = keyMatrix[r1][c1+1];
				}
				
				if(c2 == 4) {
					cipherArr[i+1] = keyMatrix[r2][0];
				} else {
					cipherArr[i+1] = keyMatrix[r2][c2+1];
				}
				
			} else if (c1 == c2) {
				
				if(r1 == 4) {
					cipherArr[i] = keyMatrix[0][c1];
				} else {
					cipherArr[i] = keyMatrix[r1+1][c1];
				}
				
				if(r2 == 4) {
					cipherArr[i+1] = keyMatrix[0][c2];
				} else {
					cipherArr[i+1] = keyMatrix[r2+1][c2];
				}
				
				
			} else {
				
				cipherArr[i] = keyMatrix[r1][c2];
				cipherArr[i+1] = keyMatrix[r2][c1];
			}
			
			
		}
		
		return toString(cipherArr);
		
		
	}
	
	public static String decrypt(String cipherText, String key, char[][] keyMatrix) {

    char[] cipherArr = breakPlainTextIntoPairs(cipherText);

    char[] plainArr = new char[arrayLength(cipherText)];


    for(int i = 0; i < cipherArr.length; i=i+2) {
        char first = cipherArr[i];
        char second = cipherArr[i+1];

        int r1 = rowIndex(first, keyMatrix);
        int c1 = colIndex(first, keyMatrix);

        int r2 = rowIndex(second, keyMatrix);
        int c2 = colIndex(second, keyMatrix);

        if(r1 == r2) {
        
            if(c1 == 0) {
             
                plainArr[i] = keyMatrix[r1][4];
            } else {
                plainArr[i] = keyMatrix[r1][c1-1];
            }

            if(c2 == 0) {
                plainArr[i+1] = keyMatrix[r2][4];
            } else {
                plainArr[i+1] = keyMatrix[r2][c2-1];
            }

        } else if (c1 == c2) {
          
            if(r1 == 0) {
                plainArr[i] = keyMatrix[4][c1];
            } else {
                plainArr[i] = keyMatrix[r1-1][c1];
            }

            if(r2 == 0) {
                plainArr[i+1] = keyMatrix[4][c2];
            } else {
                plainArr[i+1] = keyMatrix[r2-1][c2];
            }

        } else {
           
            plainArr[i] = keyMatrix[r1][c2];
            plainArr[i+1] = keyMatrix[r2][c1];
        }
    }
	String plainText = removeFilterCharacter(plainArr);
    return (plainText);
}

	public static char[] breakPlainTextIntoPairs(String plainText) {
		
		char[] textArr = new char[arrayLength(plainText)];
		
		
		
		int q = 0; 
		int y = 0; 
		while(y != textArr.length) {
			if(plainText.charAt(q) == plainText.charAt(q+1)) {
				
				textArr[y] = plainText.charAt(q);
				textArr[y+1] = 'X';
				q++;
				y = y + 2;
			} else {
				if(plainText.charAt(q+1) == ' ') {
					
					textArr[y] = plainText.charAt(q);
					textArr[y+1] = 'X';
					q++;
					y = y + 2;
				} else {
					
					textArr[y] = plainText.charAt(q);
					textArr[y+1] = plainText.charAt(q+1);
					q = q + 2;
					y = y + 2;
				}
			}
		}
		
		return textArr;
	}
	
	public static int arrayLength(String plainText) {
		int q = 0; 
		int y = 0;

		while(plainText.charAt(q) != ' ') {
			
			if(plainText.charAt(q) == plainText.charAt(q+1)) {
				
				q++;
				y = y + 2;
			} else {
				if(plainText.charAt(q+1) == ' ') {
					
					q++;
					y = y + 2;
				} else {
					
					q = q + 2;
					y = y + 2;
				}
			}
		}
		
		return y;
	}
	static char[] toArray(String str){
		char arr[] = new char[arrayLength(str)];
		for(int i=0; i<str.length(); i++){
			arr[i] = str.charAt(i);
		}
		return arr;
	}
	
	static String removeFilterCharacter(char[] arr){
		String plainText = "";
		for(int i=0; i<arr.length; i++){
			if(arr[i] != 'X'){
				plainText += arr[i];
			}
		}
		return plainText;
	}
	
	
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		char[] alphabet = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
		
		System.out.println("Enter the key : ");
		String key = sc.nextLine();
		
		System.out.println("Enter message : ");
		String message = sc.nextLine();
		message += "  ";
		
		key = key.toUpperCase();
		message = message.toUpperCase();
		
		String uniqueKeyString = removeDuplicateElementFromKey(key);
		System.out.println("Unique key string : " + uniqueKeyString);
		
		String uniqueArrayString = createArrayString(uniqueKeyString, alphabet);
		System.out.println("Unique array string : " + uniqueArrayString);
		
		char[][] keyMatrix = createKeyMatrix(uniqueArrayString);
		System.out.println("Select the Option: ");
		System.out.println("	1.Encryption");
		System.out.println("	2.Decryption");
		
		System.out.print("Option(1/2): ");
		int option = sc.nextInt();
		
		String ciperText = "";
		
		if(option == 1){
			ciperText = encrypt(message, key, keyMatrix);
			System.out.println("Ciper Text : " + ciperText);
		}
		else if(option == 2){
			String originalText = decrypt(message, key, keyMatrix);
			System.out.println("Original Text: " + originalText);
		}
		else{
			System.out.println("Invalid Option");
		}
		String cipher = encrypt(message, key, keyMatrix);
		
		System.out.println("Cipher : " + cipher);
	}
}
